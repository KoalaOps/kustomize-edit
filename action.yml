name: 'Kustomize Edit'
description: 'Edit kustomize overlays - set images, labels, annotations, name/namespace, replicas, ConfigMap values'
author: 'KoalaOps'

branding:
  icon: 'edit'
  color: 'purple'

inputs:
  overlay_dir:
    description: 'Path to kustomize overlay directory'
    required: true
  debug:
    description: 'Enable debug output'
    required: false
    default: 'false'
  image:
    description: 'Container image (e.g., registry.io/app or registry.io/app:v1.2.3)'
    required: false
  tag:
    description: 'Image tag (e.g., v1.2.3, latest, sha-abc123)'
    required: false
  images_json:
    description: 'Multiple images as JSON array: [{"name":"registry.io/app","newTag":"v1.2.3"}]'
    required: false
  version_label:
    description: 'Value for app.kubernetes.io/version label'
    required: false
  annotations:
    description: 'Annotations to add (key:value or key=value format, one per line)'
    required: false
  labels:
    description: 'Labels to add (key:value or key=value format, one per line)'
    required: false
  name_prefix:
    description: 'Name prefix to set'
    required: false
  name_suffix:
    description: 'Name suffix to set'
    required: false
  namespace:
    description: 'Namespace to set'
    required: false
  replicas:
    description: 'Replicas count to set (JSON format, e.g., [{"name":"deployment-name","count":3}])'
    required: false
  env_patches:
    description: 'Environment file patches (JSON format matching patch-env-files, e.g., {"container.env":{"SENTRY_RELEASE":"v1.2.3"}})'
    required: false

outputs:
  overlay_dir:
    description: 'Path to the edited overlay'
    value: ${{ inputs.overlay_dir }}
  kustomization_file:
    description: 'Path to kustomization.yaml'
    value: ${{ inputs.overlay_dir }}/kustomization.yaml

runs:
  using: 'composite'
  steps:
    - name: Check required tools
      shell: bash
      run: |
        set -euo pipefail
        echo "üîç Checking required tools..."

        # Check for kustomize
        if ! command -v kustomize >/dev/null 2>&1; then
          echo "::error::kustomize not found. Please install it first. See: https://kubectl.docs.kubernetes.io/installation/kustomize/"
          exit 1
        fi

        # Check for jq (needed for replicas)
        if [ -n "${{ inputs.replicas }}" ] && ! command -v jq >/dev/null 2>&1; then
          echo "::error::jq not found. Required for replicas input. Install with: apt-get install -y jq"
          exit 1
        fi

        # Check for yq (needed for version_label)
        if [ -n "${{ inputs.version_label }}" ] && ! command -v yq >/dev/null 2>&1; then
          echo "::warning::yq not found. Will be installed automatically if version_label is used."
        fi

        echo "‚úÖ Required tools available"
    
    - name: Validate overlay directory
      shell: bash
      run: |
        set -euo pipefail
        if [ ! -d "${{ inputs.overlay_dir }}" ]; then
          echo "::error::Overlay directory not found: ${{ inputs.overlay_dir }}"
          exit 1
        fi
        
        if [ ! -f "${{ inputs.overlay_dir }}/kustomization.yaml" ]; then
          echo "::error::No kustomization.yaml found in ${{ inputs.overlay_dir }}"
          exit 1
        fi
        
        echo "‚úÖ Found kustomization.yaml in: ${{ inputs.overlay_dir }}"

    - name: Patch environment files
      if: inputs.env_patches != ''
      uses: KoalaOps/patch-env-files@v1
      with:
        path: ${{ inputs.overlay_dir }}
        patches: ${{ inputs.env_patches }}

    - name: Normalize image inputs
      id: normalize
      if: inputs.image != '' || inputs.images_json != ''
      shell: bash
      run: |
        set -euo pipefail

        if [ -n "${{ inputs.images_json }}" ]; then
          # Using images_json - ensure image/tag are not provided
          if [ -n "${{ inputs.image }}" ] || [ -n "${{ inputs.tag }}" ]; then
            echo "::error::When using images_json, do not provide image or tag parameters"
            exit 1
          fi
          echo "using_images_json=true" >> $GITHUB_OUTPUT
          echo "normalized_image=" >> $GITHUB_OUTPUT
          echo "normalized_tag=" >> $GITHUB_OUTPUT
        else
          # Not using images_json - require image parameter
          if [ -z "${{ inputs.image }}" ]; then
            echo "::error::Must provide either images_json OR image parameter"
            exit 1
          fi

          # Check if image contains embedded tag (backwards compatibility: image:tag format)
          IMAGE="${{ inputs.image }}"
          if [[ "$IMAGE" =~ ^(.+):([^/]+)$ ]]; then
            # Split image:tag format (backwards compatibility)
            NORMALIZED_IMAGE="${BASH_REMATCH[1]}"
            NORMALIZED_TAG="${BASH_REMATCH[2]}"
            echo "normalized_image=$NORMALIZED_IMAGE" >> $GITHUB_OUTPUT
            echo "normalized_tag=$NORMALIZED_TAG" >> $GITHUB_OUTPUT
            echo "‚úì Detected embedded tag in image parameter - image: $NORMALIZED_IMAGE, tag: $NORMALIZED_TAG"
            # Warn if both formats provided
            if [ -n "${{ inputs.tag }}" ]; then
              echo "::warning::Both image:tag format and separate tag parameter provided. Using embedded tag from image."
            fi
          else
            # Image doesn't contain tag, require explicit tag parameter
            if [ -z "${{ inputs.tag }}" ]; then
              echo "::error::Image parameter does not contain a tag. Please provide the tag parameter or use image:tag format."
              exit 1
            fi
            echo "normalized_image=$IMAGE" >> $GITHUB_OUTPUT
            echo "normalized_tag=${{ inputs.tag }}" >> $GITHUB_OUTPUT
            echo "‚úì Using separate image and tag parameters"
          fi
          echo "using_images_json=false" >> $GITHUB_OUTPUT
        fi

    - name: Set images (single or multiple)
      if: inputs.image != '' || inputs.images_json != ''
      shell: bash
      working-directory: ${{ inputs.overlay_dir }}
      run: |
        set -euo pipefail

        # Process images_json
        if [ -n "${{ inputs.images_json }}" ]; then
          # Validate JSON format
          if ! echo '${{ inputs.images_json }}' | jq empty 2>/dev/null; then
            echo "::error::Invalid images_json format. Expected JSON array like: [{\"name\":\"registry.io/app\",\"newTag\":\"v1.2.3\"}]"
            exit 1
          fi

          # Count images
          IMAGE_COUNT=$(echo '${{ inputs.images_json }}' | jq 'length')

          # Collect image summary for logging
          IMAGE_SUMMARY=$(echo '${{ inputs.images_json }}' | jq -r '.[] | "\(.name):\(.newTag)"' | paste -sd ', ' -)

          # Iterate through images and set each one
          echo '${{ inputs.images_json }}' | jq -c '.[]' | while read -r img; do
            NAME=$(echo "$img" | jq -r '.name // empty')
            NEW_TAG=$(echo "$img" | jq -r '.newTag // empty')

            if [ -z "$NAME" ]; then
              echo "::error::Image entry missing 'name' field: $img"
              exit 1
            fi

            if [ -z "$NEW_TAG" ]; then
              echo "::error::Image entry missing 'newTag' field: $img"
              exit 1
            fi

            kustomize edit set image "$NAME:$NEW_TAG"
          done

          echo "‚úÖ Set $IMAGE_COUNT image(s): $IMAGE_SUMMARY"

        # Process single image (using normalized values)
        else
          NORM_IMAGE="${{ steps.normalize.outputs.normalized_image }}"
          NORM_TAG="${{ steps.normalize.outputs.normalized_tag }}"
          kustomize edit set image "$NORM_IMAGE:$NORM_TAG"
          echo "‚úÖ Set image: $NORM_IMAGE:$NORM_TAG"
        fi
    
    - name: Set version label
      if: inputs.version_label != ''
      shell: bash
      working-directory: ${{ inputs.overlay_dir }}
      run: |
        set -euo pipefail
        echo "üè∑Ô∏è Setting version label: ${{ inputs.version_label }}"

        # Check if yq is available
        if ! command -v yq >/dev/null 2>&1; then
          echo "::error::yq not found. Installing yq..."
          # Try to install yq based on the platform
          if command -v apt-get >/dev/null 2>&1; then
            sudo apt-get update && sudo apt-get install -y yq
          elif command -v brew >/dev/null 2>&1; then
            brew install yq
          else
            # Fallback to downloading binary directly
            echo "Installing yq binary..."
            YQ_VERSION="v4.35.1"
            ARCH=$(uname -m)
            OS=$(uname -s | tr '[:upper:]' '[:lower:]')
            if [ "$ARCH" = "x86_64" ]; then ARCH="amd64"; fi
            curl -sL "https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_${OS}_${ARCH}" -o /tmp/yq
            chmod +x /tmp/yq
            sudo mv /tmp/yq /usr/local/bin/yq
          fi
        fi

        VERSION_LABEL="${{ inputs.version_label }}"
        export VERSION_LABEL

        # 1) Remove any old commonLabels version to avoid selector contamination
        yq -i 'del(.commonLabels."app.kubernetes.io/version")' kustomization.yaml 2>/dev/null || true

        # 2) Merge into an existing templates-only labels entry, or create one
        if yq -e '.labels[] | select(.includeTemplates == true and .includeSelectors == false)' kustomization.yaml >/dev/null 2>&1; then
          # Update existing templates-only entry
          yq -i '(.labels[] | select(.includeTemplates == true and .includeSelectors == false)).pairs."app.kubernetes.io/version" = env(VERSION_LABEL)' kustomization.yaml
        else
          # Add new templates-only entry
          yq -i '.labels += [{"pairs": {"app.kubernetes.io/version": env(VERSION_LABEL)}, "includeSelectors": false, "includeTemplates": true}]' kustomization.yaml
        fi

        echo "‚úÖ Version label set to: $VERSION_LABEL"
    
    - name: Add annotations
      if: inputs.annotations != ''
      shell: bash
      working-directory: ${{ inputs.overlay_dir }}
      run: |
        set -euo pipefail
        echo "üìù Adding annotations..."
        echo "${{ inputs.annotations }}" | while IFS= read -r line; do
          # Strip trailing comments and trim whitespace
          line="${line%%#*}"
          line="$(echo "$line" | xargs)"
          [ -z "$line" ] && continue
          
          # Convert all = to : for kustomize format (support both formats)
          line="${line//=/:}"
          echo "  - $line"
          kustomize edit set annotation "$line"
        done
    
    - name: Add labels
      if: inputs.labels != ''
      shell: bash
      working-directory: ${{ inputs.overlay_dir }}
      run: |
        set -euo pipefail
        echo "üè∑Ô∏è Adding labels..."
        echo "${{ inputs.labels }}" | while IFS= read -r line; do
          # Strip trailing comments and trim whitespace
          line="${line%%#*}"
          line="$(echo "$line" | xargs)"
          [ -z "$line" ] && continue
          
          # Convert all = to : for kustomize format (support both formats)
          line="${line//=/:}"
          echo "  - $line"
          kustomize edit set label "$line"
        done
    
    - name: Set name prefix
      if: inputs.name_prefix != ''
      shell: bash
      working-directory: ${{ inputs.overlay_dir }}
      run: |
        set -euo pipefail
        echo "üìõ Setting name prefix: ${{ inputs.name_prefix }}"
        kustomize edit set nameprefix "${{ inputs.name_prefix }}"
    
    - name: Set name suffix
      if: inputs.name_suffix != ''
      shell: bash
      working-directory: ${{ inputs.overlay_dir }}
      run: |
        set -euo pipefail
        echo "üìõ Setting name suffix: ${{ inputs.name_suffix }}"
        kustomize edit set namesuffix "${{ inputs.name_suffix }}"
    
    - name: Set namespace
      if: inputs.namespace != ''
      shell: bash
      working-directory: ${{ inputs.overlay_dir }}
      run: |
        set -euo pipefail
        echo "üìÅ Setting namespace: ${{ inputs.namespace }}"
        kustomize edit set namespace "${{ inputs.namespace }}"
    
    - name: Set replicas
      if: inputs.replicas != ''
      shell: bash
      working-directory: ${{ inputs.overlay_dir }}
      run: |
        set -euo pipefail
        echo "üî¢ Setting replicas..."
        REPLICAS='${{ inputs.replicas }}'
        
        # Validate JSON
        if ! echo "$REPLICAS" | jq empty 2>/dev/null; then
          echo "::error::Invalid replicas JSON format"
          exit 1
        fi
        
        # Process each replica setting
        echo "$REPLICAS" | jq -c '.[]' | while read -r replica; do
          NAME=$(echo "$replica" | jq -r '.name // empty')
          COUNT=$(echo "$replica" | jq -r '.count // empty')
          if [ -z "$NAME" ] || [ -z "$COUNT" ]; then
            echo "::error::replicas entries must have {\"name\",\"count\"}"
            exit 1
          fi
          echo "  - $NAME: $COUNT replicas"
          kustomize edit set replicas "${NAME}=${COUNT}"
        done

    - name: Validate kustomization
      shell: bash
      working-directory: ${{ inputs.overlay_dir }}
      run: |
        set -euo pipefail
        echo "‚úÖ Validating kustomization..."
        if ! kustomize build . > /dev/null 2>&1; then
          echo "::error::Kustomization validation failed"
          kustomize build . 2>&1 | head -20
          exit 1
        fi

        # Check that version label is not in selectors (would cause immutable field error)
        if [ -n "${{ inputs.version_label }}" ]; then
          echo "üîç Checking selectors don't contain version label..."
          MANIFESTS=$(kustomize build .)
          if echo "$MANIFESTS" | grep -A10 "kind: Deployment\|kind: StatefulSet\|kind: DaemonSet" | grep -B5 "selector:" | grep -q "app.kubernetes.io/version"; then
            echo "::error::Version label found in selector (immutable field). This would cause deployment to fail."
            echo "::error::The version label should only be in pod templates, not selectors."
            exit 1
          fi
        fi

        echo "‚úÖ Kustomization is valid"
    
    - name: Show debug output
      if: inputs.debug == 'true'
      shell: bash
      working-directory: ${{ inputs.overlay_dir }}
      run: |
        set -euo pipefail
        echo "üìã Final kustomization.yaml:"
        cat kustomization.yaml
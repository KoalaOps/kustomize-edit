name: 'Kustomize Edit'
description: 'Edit kustomize overlays - set images, labels, annotations, name/namespace, replicas, ConfigMap values'
author: 'KoalaOps'

branding:
  icon: 'edit'
  color: 'purple'

inputs:
  overlay_dir:
    description: 'Path to kustomize overlay directory'
    required: true
  debug:
    description: 'Enable debug output'
    required: false
    default: 'false'
  image:
    description: 'Image name (without tag)'
    required: false
  tag:
    description: 'Image tag'
    required: false
  version_label:
    description: 'Value for app.kubernetes.io/version label'
    required: false
  annotations:
    description: 'Annotations to add (key:value or key=value format, one per line)'
    required: false
  labels:
    description: 'Labels to add (key:value or key=value format, one per line)'
    required: false
  name_prefix:
    description: 'Name prefix to set'
    required: false
  name_suffix:
    description: 'Name suffix to set'
    required: false
  namespace:
    description: 'Namespace to set'
    required: false
  replicas:
    description: 'Replicas count to set (JSON format, e.g., [{"name":"deployment-name","count":3}])'
    required: false
  configmap_values:
    description: 'ConfigMap values to inject (JSON format, e.g., [{"key":"SENTRY_RELEASE","value":"v1.2.3"}])'
    required: false

outputs:
  overlay_dir:
    description: 'Path to the edited overlay'
    value: ${{ inputs.overlay_dir }}
  kustomization_file:
    description: 'Path to kustomization.yaml'
    value: ${{ inputs.overlay_dir }}/kustomization.yaml

runs:
  using: 'composite'
  steps:
    - name: Check required tools
      shell: bash
      run: |
        set -euo pipefail
        echo "🔍 Checking required tools..."
        
        # Check for kustomize
        if ! command -v kustomize >/dev/null 2>&1; then
          echo "::error::kustomize not found. Please install it first. See: https://kubectl.docs.kubernetes.io/installation/kustomize/"
          exit 1
        fi
        
        # Check for jq (needed for replicas and configmap_values)
        if ([ -n "${{ inputs.replicas }}" ] || [ -n "${{ inputs.configmap_values }}" ]) && ! command -v jq >/dev/null 2>&1; then
          echo "::error::jq not found. Required for replicas or configmap_values input. Install with: apt-get install -y jq"
          exit 1
        fi
        
        echo "✅ Required tools available"
    
    - name: Validate overlay directory
      shell: bash
      run: |
        set -euo pipefail
        if [ ! -d "${{ inputs.overlay_dir }}" ]; then
          echo "::error::Overlay directory not found: ${{ inputs.overlay_dir }}"
          exit 1
        fi
        
        if [ ! -f "${{ inputs.overlay_dir }}/kustomization.yaml" ]; then
          echo "::error::No kustomization.yaml found in ${{ inputs.overlay_dir }}"
          exit 1
        fi
        
        echo "✅ Found kustomization.yaml in: ${{ inputs.overlay_dir }}"
    
    - name: Set image and tag
      if: inputs.image != '' && inputs.tag != ''
      shell: bash
      working-directory: ${{ inputs.overlay_dir }}
      run: |
        set -euo pipefail
        echo "🏷️ Setting image: ${{ inputs.image }}:${{ inputs.tag }}"
        # Set the image with its tag
        # Format: [old-image-name=]new-image-name:new-tag
        # kustomize will match any existing image that starts with the image name
        kustomize edit set image "${{ inputs.image }}:${{ inputs.tag }}"
    
    - name: Set version label
      if: inputs.version_label != ''
      shell: bash
      working-directory: ${{ inputs.overlay_dir }}
      run: |
        set -euo pipefail
        echo "🏷️ Setting version label: ${{ inputs.version_label }}"

        # Create a LabelTransformer to add version label only to pod templates
        # This avoids the immutable selector field error in Kubernetes
        cat > version-label-transformer.yaml <<EOF
        apiVersion: kustomize.config.k8s.io/v1beta1
        kind: LabelTransformer
        metadata:
          name: version-label
        labels:
          app.kubernetes.io/version: "${{ inputs.version_label }}"
        fieldSpecs:
          - kind: Deployment
            path: spec/template/metadata/labels
          - kind: StatefulSet
            path: spec/template/metadata/labels
          - kind: DaemonSet
            path: spec/template/metadata/labels
          - kind: Job
            path: spec/template/metadata/labels
          - kind: CronJob
            path: spec/jobTemplate/spec/template/metadata/labels
          - kind: Rollout
            path: spec/template/metadata/labels
            group: argoproj.io
        EOF

        # Add the transformer to kustomization.yaml
        if grep -q "^transformers:" kustomization.yaml; then
          echo "  - version-label-transformer.yaml" >> kustomization.yaml
        else
          cat >> kustomization.yaml <<EOF
        transformers:
          - version-label-transformer.yaml
        EOF
        fi
    
    - name: Add annotations
      if: inputs.annotations != ''
      shell: bash
      working-directory: ${{ inputs.overlay_dir }}
      run: |
        set -euo pipefail
        echo "📝 Adding annotations..."
        echo "${{ inputs.annotations }}" | while IFS= read -r line; do
          # Strip trailing comments and trim whitespace
          line="${line%%#*}"
          line="$(echo "$line" | xargs)"
          [ -z "$line" ] && continue
          
          # Convert all = to : for kustomize format (support both formats)
          line="${line//=/:}"
          echo "  - $line"
          kustomize edit set annotation "$line"
        done
    
    - name: Add labels
      if: inputs.labels != ''
      shell: bash
      working-directory: ${{ inputs.overlay_dir }}
      run: |
        set -euo pipefail
        echo "🏷️ Adding labels..."
        echo "${{ inputs.labels }}" | while IFS= read -r line; do
          # Strip trailing comments and trim whitespace
          line="${line%%#*}"
          line="$(echo "$line" | xargs)"
          [ -z "$line" ] && continue
          
          # Convert all = to : for kustomize format (support both formats)
          line="${line//=/:}"
          echo "  - $line"
          kustomize edit set label "$line"
        done
    
    - name: Set name prefix
      if: inputs.name_prefix != ''
      shell: bash
      working-directory: ${{ inputs.overlay_dir }}
      run: |
        set -euo pipefail
        echo "📛 Setting name prefix: ${{ inputs.name_prefix }}"
        kustomize edit set nameprefix "${{ inputs.name_prefix }}"
    
    - name: Set name suffix
      if: inputs.name_suffix != ''
      shell: bash
      working-directory: ${{ inputs.overlay_dir }}
      run: |
        set -euo pipefail
        echo "📛 Setting name suffix: ${{ inputs.name_suffix }}"
        kustomize edit set namesuffix "${{ inputs.name_suffix }}"
    
    - name: Set namespace
      if: inputs.namespace != ''
      shell: bash
      working-directory: ${{ inputs.overlay_dir }}
      run: |
        set -euo pipefail
        echo "📁 Setting namespace: ${{ inputs.namespace }}"
        kustomize edit set namespace "${{ inputs.namespace }}"
    
    - name: Set replicas
      if: inputs.replicas != ''
      shell: bash
      working-directory: ${{ inputs.overlay_dir }}
      run: |
        set -euo pipefail
        echo "🔢 Setting replicas..."
        REPLICAS='${{ inputs.replicas }}'
        
        # Validate JSON
        if ! echo "$REPLICAS" | jq empty 2>/dev/null; then
          echo "::error::Invalid replicas JSON format"
          exit 1
        fi
        
        # Process each replica setting
        echo "$REPLICAS" | jq -c '.[]' | while read -r replica; do
          NAME=$(echo "$replica" | jq -r '.name // empty')
          COUNT=$(echo "$replica" | jq -r '.count // empty')
          if [ -z "$NAME" ] || [ -z "$COUNT" ]; then
            echo "::error::replicas entries must have {\"name\",\"count\"}"
            exit 1
          fi
          echo "  - $NAME: $COUNT replicas"
          kustomize edit set replicas "${NAME}=${COUNT}"
        done
    
    - name: Inject ConfigMap values
      if: inputs.configmap_values != ''
      shell: bash
      working-directory: ${{ inputs.overlay_dir }}
      run: |
        set -euo pipefail
        echo "🔧 Injecting ConfigMap values..."
        VALUES='${{ inputs.configmap_values }}'
        
        # Validate JSON
        if ! echo "$VALUES" | jq empty 2>/dev/null; then
          echo "::error::Invalid configmap_values JSON format"
          exit 1
        fi
        
        # Find ConfigMap name from kustomization.yaml
        CONFIGMAP_NAME=""
        if grep -q "^configMapGenerator:" kustomization.yaml; then
          # Extract the first ConfigMap name from configMapGenerator
          CONFIGMAP_NAME=$(sed -n '/^configMapGenerator:/,/^[^[:space:]]/p' kustomization.yaml | grep -m1 "^[ ]*- name:" | sed 's/.*name:[ ]*//')
          if [ -n "$CONFIGMAP_NAME" ]; then
            echo "  Found ConfigMap: $CONFIGMAP_NAME"
          fi
        fi
        
        if [ -z "$CONFIGMAP_NAME" ]; then
          echo "::warning::No configMapGenerator found in kustomization.yaml. Skipping ConfigMap value injection."
          exit 0
        fi
        
        # Process each value to inject
        echo "$VALUES" | jq -c '.[]' | while read -r value; do
          KEY=$(echo "$value" | jq -r '.key // empty')
          VAL=$(echo "$value" | jq -r '.value // empty')
          
          if [ -z "$KEY" ] || [ -z "$VAL" ]; then
            echo "::error::configmap_values entries must have {\"key\",\"value\"}"
            exit 1
          fi
          
          echo "  - Setting $KEY=$VAL"
          
          # Create the patch using kustomize edit add patch
          kustomize edit add patch \
            --kind=ConfigMap \
            --name="$CONFIGMAP_NAME" \
            --patch="[{\"op\":\"add\",\"path\":\"/data/$KEY\",\"value\":\"$VAL\"}]"
        done
    
    - name: Validate kustomization
      shell: bash
      working-directory: ${{ inputs.overlay_dir }}
      run: |
        set -euo pipefail
        echo "✅ Validating kustomization..."
        if ! kustomize build . > /dev/null 2>&1; then
          echo "::error::Kustomization validation failed"
          kustomize build . 2>&1 | head -20
          exit 1
        fi

        # Check that version label is not in selectors (would cause immutable field error)
        if [ -n "${{ inputs.version_label }}" ]; then
          echo "🔍 Checking selectors don't contain version label..."
          MANIFESTS=$(kustomize build .)
          if echo "$MANIFESTS" | grep -A10 "kind: Deployment\|kind: StatefulSet\|kind: DaemonSet" | grep -B5 "selector:" | grep -q "app.kubernetes.io/version"; then
            echo "::error::Version label found in selector (immutable field). This would cause deployment to fail."
            echo "::error::The version label should only be in pod templates, not selectors."
            exit 1
          fi
        fi

        echo "✅ Kustomization is valid"
    
    - name: Show debug output
      if: inputs.debug == 'true'
      shell: bash
      working-directory: ${{ inputs.overlay_dir }}
      run: |
        set -euo pipefail
        echo "📋 Final kustomization.yaml:"
        cat kustomization.yaml